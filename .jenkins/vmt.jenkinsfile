// groovylint-disable ConsecutiveBlankLines


Map vaultConfiguration = [
    engineVersion: 2,
    timeout: 60,
    vaultUrl: 'https://vault.keysight.com',
    vaultCredentialId: 'vault-approle'
]
 
ArrayList<Map> vaultSecrets = [
    [
        engineVersion: 2,
        path: 'kosi-devops/team-pwsm/opentapplugins/labview', 
        secretValues: [
             [envVar: 'Ks8500Token', vaultKey: 'repo-pathwave-token'],
             [envVar: 'VmtApiKey', vaultKey: 'vmt-jwt-token']
        ]
    ]
]

// groovylint-disable-next-line
@Library('KOSi Pipeline Library@v5.3.1') _

Map projectConfig =
[
    'vmtProjectId': '699',
    'vmtVersionId': '',
    'vmtTargetVm': '',
    'jobFullName': '',
    'projectName': 'LabVIEW',
    'scanAgentLabel': 'windows',
    
    'logLevel': 'debug',
    'vmt': [
        'url': 'https://vmt-app-int-elb.blackduck.usw2.amzn.keysight.com'
    ],
    'downloadArtifactoryResources': [
        [
            'source': 'generic-local-cloudshare/LabVIEW_Runtime/LabVIEW_Runtime_2024_Q1_x64.zip', 
            'destination': './LabVIEW_Runtime/', 
            'unarchive': 'true'
        ]
    ]
]

// =====================================================================
// KpcBuildAgents Configuration
// =====================================================================
List PipelineAgents =
[
    [label: 'windows', type: 'vsphere', jenkinsHostLabel: 'windows']
]
def PipelineKpcBuildAgents = GetKpcBuildAgentsSingleton()

// =====================================================================
// Kubernetes KOSi Pipeline Executor Configuration
// =====================================================================
KosiLoadKplContainerExtensions()
InsertKpeKubernetesAgentInfo(projectConfig)

// =====================================================================
// The Pipeline
// =====================================================================
pipeline
{
    agent
    {
        kubernetes
        {
            yaml projectConfig.KpekubernetesConfig.kubernetesLinuxAgent.yaml
        }
    }

    options
    {
        disableConcurrentBuilds()
        disableResume()
        skipDefaultCheckout true
        timestamps()
    }

    stages
    {
        stage('Initialize Library Data')
        {
            steps
            {
                InsertPipelineInitialization(projectConfig)
            }
        }

        stage('KPC Reservation')
        {
            steps
            {
                script
                {
                    PipelineKpcBuildAgents.Reserve(projectConfig, PipelineAgents)
                }
            }
        }

        stage('Prepare Build Agent Workspace')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                script
                {
                    List packageConfigs = [
                        [packageType: 'dotnet']
                    ]
                    PipelineStagePrepare(projectConfig, packageConfigs)
                }
            }
        }

        stage('Build software')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                withVault([configuration: vaultConfiguration, vaultSecrets: vaultSecrets])
                {
                    script
                    {
                        echo "Build project"              
                        powershell """
                            dotnet build -c Release --property:Ks8500Token="\$env:Ks8500Token"
                            """
                        version = powershell(script: """
                            write-output((.\\bin\\Release\\tap sdk gitversion | Select-Object -Last 1) -replace "\\+.*\$","")
                            """, returnStdout: true).trim()
                        echo "${version}"
                    }
                }
            }
        }

        stage('Create VMT Version')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                withVault([configuration: vaultConfiguration, vaultSecrets: vaultSecrets])
                {
                    script
                    {
                        versionId = powershell(script: """
                            # Define the Headers with the Bearer Token

                            \$headers = @{"Authorization" = \$env:VmtApiKey}
                            \$body = @{
                                "Version Name" = "${projectConfig.projectName}-${version}";
                                "Milestone Status" = "PM";
                                "Operating System" = "Windows 10 from Keysight Labs";
                                "Product Type" = "SAO";
                                "LXI Product" = "false"
                            }
                            
                            \$bodyJson = \$body | ConvertTo-Json
                            \$response = Invoke-RestMethod -Uri "${projectConfig.vmt.url}/api/v2/projects/${projectConfig.vmtProjectId}/versions/" -Method Post -Body \$bodyJson -Headers \$headers -ContentType "application/json" 
                            \$versionId = \$response.Version.Split("/", [System.StringSplitOptions]::RemoveEmptyEntries)[-1]
                            write-output(\$versionId)
                            """, returnStdout: true).trim()

                        projectConfig.vmtVersionId = "${versionId}"
                    }
                }
            }            
        }

        stage('Install LabVIEW Runtime')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                withVault([configuration: vaultConfiguration, vaultSecrets: vaultSecrets])
                {
                    script
                    {
                        echo "Downloading LabVIEW Runtime"
                        DownloadFilesFromArtifactoryWithJfrogCli(projectConfig)
                        echo "Installing LabVIEW Runtime"
                        powershell """
                            pushd LabVIEW_Runtime
                            dir
                            get-date; start-process .\\setup.exe -ArgumentList "/q /AcceptLicenses yes /r:n /log labview_runtime.log"; start-sleep -seconds 10; wait-process setup; get-date
                            popd
                            """                    
                        echo "Done installing LabVIEW Runtime"
                    }
                }
            }            
        }

        stage('VMT Base Scan')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                script
                {                 
                    def stageIp = powershell(script: '(Get-NetIPAddress -AddressFamily IPv4 -PrefixOrigin Dhcp).IPAddress', returnStdout: true).trim()
                    echo "Stage IP: '${stageIp}'"
                    projectConfig.vmtTargetVm = stageIp

                    echo "Start TAP before base scan"
                    bat """
                        set JENKINS_NODE_COOKIE=dontKillMe
                        start /B .\\bin\\Release\\tap run --ignore-load-errors -v .\\.jenkins\\test\\pause_8hours.TapPlan
                        """
                    sleep time: 30, unit: 'SECONDS'
         
                    echo "Base scan"
                    projectConfig.jobFullName = "${projectConfig.projectName}-${version}-base" 
                    NessusScan(projectConfig)
                    echo "Base scan done"
                    echo "Kill TAP after base scan"
                    bat """
                        taskkill /F /T /IM tap.exe
                        """
                }
            }
        }

        stage('Install plugin')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                script
                {                 
                    echo "Install plugin"
                    powershell """
                        .\\bin\\Release\\tap package install "LabVIEW Examples" -r .\\bin\\Release --version $version
                        .\\bin\\Release\\tap package install "LabVIEW" -r .\\bin\\Release --version $version
                        """
                }
            }
        }

        stage('Refresh the Vault token')
        {
            steps
            {
                InsertVaultTokenViaJava(projectConfig)
            }
        }

        stage('VMT Diff Scan')
        {
            agent { label "${PipelineKpcBuildAgents.GetAgentLabelExpression(projectConfig.scanAgentLabel)}" }
            steps
            {
                script
                {                 
                    echo "Start TAP before diff scan"
                    bat """
                        set JENKINS_NODE_COOKIE=dontKillMe
                        start /B .\\bin\\Release\\tap run --ignore-load-errors -v .\\.jenkins\\test\\lv_add_then_pause_8hours.TapPlan
                        """
                    sleep time: 30, unit: 'SECONDS'

                    echo "Diff scan"
                    projectConfig.jobFullName = "${projectConfig.projectName}-${version}-diffscan" 
                    NessusScan(projectConfig)
                    echo "Diff scan done"
                    echo "Kill TAP after diff scan"
                    bat """
                        taskkill /F /T /IM tap.exe
                        """
                }
            }
        }
    }

    post
    {
        always
        {
            script
            {
                PipelineKpcBuildAgents.Release(projectConfig)
            }
        }
    }
}